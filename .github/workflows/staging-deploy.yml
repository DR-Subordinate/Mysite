# ステージング環境へデプロイする
name: Staging Deploy

on:
  # dev ブランチへプッシュされたとき
  push:
    branches:
      - dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3

      # FTP 経由でファイルをサーバへ転送する
      - name: FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME_STAGE }}
          password: ${{ secrets.FTP_PASSWORD_STAGE }}
          server-dir: ./
          exclude: |
            **/.**/**
            .editorconfig
            .gitignore

      # SSH 経由でコマンドを実行する
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/brandacross/across-shop.com/public_html/stage.across-shop.com

            # .env を作成
            cat << EOF > .env
            DJANGO_SETTINGS_MODULE=config.settings.config_stage
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME_STAGE }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME_STAGE }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD_STAGE }}
            EOF

            # 仮想環境を作成
            pipenv --python 3

            # Pipfile.lock からパッケージをインストール
            pipenv sync

            # DB マイグレーション
            pipenv run python manage.py migrate

            # static ファイルの収集
            pipenv run python manage.py collectstatic --noinput

            # デプロイ設定のチェック
            pipenv run python manage.py check --deploy

            # index.cgi を作成
            cat << EOF > index.cgi
            #!$(pipenv --venv)/bin/python
            import sys

            import dotenv
            import pymysql

            # pipenv のパスを追加
            sys.path.insert(0, "$(pipenv --venv)/bin")

            # .env ファイルから環境変数を読み込む
            dotenv.load_dotenv()

            # pymysql で MySQL を使えるようにする
            pymysql.install_as_MySQLdb()

            from wsgiref.handlers import CGIHandler
            from django.core.wsgi import get_wsgi_application

            # アプリケーションを起動
            application = get_wsgi_application()
            CGIHandler().run(application)
            EOF

            # index.cgi のパーミッションを変更
            chmod 755 index.cgi
